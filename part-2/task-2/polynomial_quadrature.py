import math

def xi_values(a, b, numP):
    L = b - a
    if numP > 3: delta = L / (numP-1)
    else: delta = 0

    return {
        1: {
            1: (a + b) / 2,
        },
        2: {
            1: a,
            2: b,
        },
        3: {
            1: a,
            2: (a + b) / 2,
            3: b,
        },
        4: {
            1: a,
            2: a + delta,
            3: a + (2 * delta),
            4: b,
        },
        5: {
            1: a,
            2: a + delta,
            3: a + (2 * delta),
            4: a + (3 * delta),
            5: b,
        },
        6: {
            1: a,
            2: a + delta,
            3: a + (2 * delta),
            4: a + (3 * delta),
            5: a + (4 * delta),
            6: b,
        },
        7: {
            1: a,
            2: a + delta,
            3: a + (2 * delta),
            4: a + (3 * delta),
            5: a + (4 * delta),
            6: a + (5 * delta),
            7: b,
        },
        8: {
            1: a,
            2: a + delta,
            3: a + (2 * delta),
            4: a + (3 * delta),
            5: a + (4 * delta),
            6: a + (5 * delta),
            7: a + (6 * delta),
            8: b,
        },
        9: {
            1: a,
            2: a + delta,
            3: a + (2 * delta),
            4: a + (3 * delta),
            5: a + (4 * delta),
            6: a + (5 * delta),
            7: a + (6 * delta),
            8: a + (7 * delta),
            9: b,
        },
        10: {
            1: a,
            2: a + delta,
            3: a + (2 * delta),
            4: a + (3 * delta),
            5: a + (4 * delta),
            6: a + (5 * delta),
            7: a + (6 * delta),
            8: a + (7 * delta),
            9: a + (8 * delta),
            10: b,
        },
    }


def wi_values(a, b):
    L = b - a
    return {
    1: {
      1: L,
    },
    2: {
      1: L/2,
      2: L/2,
    },
    3: {
      1: L/6,
      2: (2*L)/3,
      3: L/6,
    },
    4: {
      1: L/8,
      2: (3*L)/8,
      3: (3*L)/8,
      4: L/8,
    },
    5: {
      1: (7*L)/90,
      2: (16*L)/45,
      3: (2*L)/15,
      4: (16*L)/45,
      5: (7*L)/90,
    },
    6: {
      1: (19*L)/288,
      2: (75*L)/288,
      3: (50*L)/288,
      4: (50*L)/288,
      5: (75*L)/288,
      6: (19*L)/288,
    },
    7: {
      1: (41*L)/(140*6),
      2: (216*L)/(140*6),
      3: (27*L)/(140*6),
      4: (272*L)/(140*6),
      5: (27*L)/(140*6),
      6: (216*L)/(140*6),
      7: (41*L)/(140*6),
    },
    8: {
      1: (751*L)/(17280),
      2: (3577*L)/(17280),
      3: (1323*L)/(17280),
      4: (2989*L)/(17280),
      5: (2989*L)/(17280),
      6: (1323*L)/(17280),
      7: (3577*L)/(17280),
      8: (751*L)/(17280),
    },
    9: {
      1: (989*L)/(28350),
      2: (5888*L)/(28350),
      3: (-928*L)/(28350),
      4: (10496*L)/(28350),
      5: (-4540*L)/(28350),
      6: (10496*L)/(28350),
      7: (-928*L)/(28350),
      8: (5888*L)/(28350),
      9: (989*L)/(28350),
    },
    10: {
      1: (2857*L)/(89600),
      2: (15741*L)/(89600),
      3: (1080*L)/(89600),
      4: (19344*L)/(89600),
      5: (5778*L)/(89600),
      6: (5778*L)/(89600),
      7: (19344*L)/(89600),
      8: (1080*L)/(89600),
      9: (15741*L)/(89600),
      10: (2857*L)/(89600),
    },
}


def func(c, x):
    return c[0] * math.exp(c[1] * x) + c[2] * math.pow(x, c[3])


def polynomial_quadrature(a, b, numP, c):
    sum = 0
    for i in range(1, numP + 1):
        f = func(c, xi_values(a, b, numP)[numP][i])
        w = wi_values(a, b)[numP][i]

        sum += f*w

    return sum

